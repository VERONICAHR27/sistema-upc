// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
/// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  name      String?
  email     String   @unique
  role      String   @default("USER") // USER, ADMIN
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  eventReservations EventReservation[]
  
  @@map("users")
}

model Convocatoria {
  id         String   @id @default(cuid())
  title      String
  status     String   @default("BORRADOR") // BORRADOR, ACTIVA, CERRADA
  principal  Boolean  @default(false)      // Para marcar cual es la convocatoria principal
  deadline   String
  type       String
  basesUrl   String?  // URL para descargar las bases
  cronograma Json?    // Almacena el cronograma como JSON
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  
  startups   Startup[]
  
  @@map("convocatorias")
}

model Event {
  id        String   @id @default(cuid())
  title     String
  date      String
  time      String
  location  String
  type      String
  status    String   @default("ACTIVO")
  featured  Boolean  @default(false)
  attendees Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  reservations EventReservation[]
  
  @@map("events")
}

model EventReservation {
  id      String @id @default(cuid())
  name    String
  email   String
  phone   String?
  
  eventId String
  event   Event  @relation(fields: [eventId], references: [id], onDelete: Cascade)
  
  userId  String?
  user    User?   @relation(fields: [userId], references: [id], onDelete: SetNull)
  
  createdAt DateTime @default(now())
  
  @@unique([eventId, email])
  @@map("event_reservations")
}

model Startup {
  id                    String   @id @default(cuid())
  nombreComercial       String
  razonSocial          String
  numeroFiscal         String
  sitioWeb             String?
  logotipo             String?
  descripcion          String
  industria            String
  industriaOther       String?
  fechaFundacion       DateTime
  problemaOportunidad  String
  solucion             String
  modeloNegocio        String
  ventajaCompetitiva   String
  necesidades          String[]
  necesidadesOther     String?
  programaAceleracion  String
  nombrePrograma       String?
  aprendizajes         String?
  aplicacionAprendizajes String?
  videoPresentacion    String?
  tieneVentas          String
  pilotoDemo           String
  ubicacionSolucion    String
  montoVentas          String?
  tecnologia           String
  areaDesarrollo       String
  inversionExterna     String
  comoSeEntero         String
  comoSeEnteroOther    String?
  aceptaPrivacidad     String
  estado               String   @default("PENDIENTE") // PENDIENTE, EN_REVISION, ACEPTADA, RECHAZADA
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  
  convocatoriaId       String?
  convocatoria         Convocatoria? @relation(fields: [convocatoriaId], references: [id], onDelete: SetNull)
  
  miembrosEquipo       TeamMember[]
  
  @@map("startups")
}

model TeamMember {
  id                String   @id @default(cuid())
  nombres           String
  apellidos         String
  rol               String
  tiempoCompleto    String
  fechaNacimiento   DateTime
  lugarNacimiento   String
  direccion         String
  tipoDocumento     String
  numeroDocumento   String
  telefono          String
  email             String
  linkedin          String?
  
  startupId         String
  startup           Startup  @relation(fields: [startupId], references: [id], onDelete: Cascade)
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  @@map("team_members")
}

